[{"categories":["Experience sharing"],"contents":"Python的selenium工具提供方便的網頁自動化功能，此篇針對簡易爬蟲的部分記錄。\n安裝及Browser Driver 如同Python的其他工具，selenium也能透過pip套件進行安裝，也可以使用Pycharm內的interpreter新增。\n由於要使用selenium自動開啟瀏覽器，我們還需要下載對應的最新版browser driver至相應的路徑內。\n為了避免繁瑣且須持續更新的下載步驟，這邊我們使用Web Driver Manager工具，可以省下不少工作。\n網頁自動化操作 在selenium中，我們可以必須先引入相關的package以及command，詳細可以參考selenium手冊，例如:\nfrom selenium import webdriver # webdriver package from webdriver_manager.chrome import ChromeDriverManager # wdm package 接下來我們可以嘗試以下指令跳轉頁面:\n# 使用.wdm指定driver位置 driver = webdriver.Chrome(ChromeDriverManager().install()) # 將webdriver設至變數driver # 若未安裝wdm，也可以使用以下指令 # driver = webdriver.Chrome(executable_path=\u0026#34;C:\\\\browser_drivers\\\\chromedriver.exe\u0026#34;) driver.maximize_window() # 最大化視窗 driver.get(\u0026#34;url1\u0026#34;) # 開啟指定url1 driver.get(\u0026#34;url2\u0026#34;) # 跳轉至url2 driver.back() # 回到上一頁(url1) driver.forward() # 回到下一頁(url2) driver.close # 關閉瀏覽器 我們也可以試著進行其他網頁操作，如點擊特定選項、輸入字元等，這裡以爬取Dcard上文章為例:\nfrom selenium import webdriver # webdriver package from selenium.webdriver.common.keys import Keys from webdriver_manager.chrome import ChromeDriverManager # drivermanager package from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait # 引入網頁讀取條件套件 from selenium.webdriver.support import expected_conditions as EC import time driver = webdriver.Chrome(ChromeDriverManager().install() driver.maximize_window() driver.get(\u0026#34;https://www.dcard.tw/f\u0026#34;) #於搜尋欄輸入文字 search = driver.find_element_by_name(\u0026#34;query\u0026#34;) search.clear() # 清空輸入欄位 search.send_keys(\u0026#34;python\u0026#34;) # 輸入文字 search.send_keys(Keys.RETURN) # enter # 等待看板顯示後再開始取title WebDriverWait(driver, 10).until( EC.presence_of_element_located((By.CLASS_NAME, \u0026#34;\u0026#34;)) # 選定條件有關之element ) # 將標題放入titles list titles = driver.find_elements_by_class_name(\u0026#34;\u0026#34;) # 填入標題檔之element # 寫出標題 for title in titles: print(title.text) time.sleep(5) # 點擊特定標籤 link = driver.find_element_by_link_text(\u0026#34;\u0026#34;) #選定特定title  link.click() time.sleep(5) driver.close() # 關閉視窗 如上述，我們可以將特定頁面的標題寫至list，也可以點擊任一文章進行跳轉。\n除此之外，我們也可以透過選定特定element進行操作，詳見selenium手冊\n總結 selenium提供了許多方便的功能讓網頁能自動化的操作，可以協助我們減少日常繁瑣的工作，對QA而言更是十分重要的工具，後續我會繼續更新selenium於測試上的相關應用。\n","permalink":"https://mike504110403.github.io/blog/python-selenium/","tags":["Web Automation","selenium","Python"],"title":"python selenium 設置及基本指令"},{"categories":["Experience sharing"],"contents":"此篇文章為線上課程Django + Flask 雙框架實戰的Flask部分實作心得。\nFlask為Python的網頁框架，能夠連結資料庫快速建立靜態網頁。\n所謂\u0026quot;MVC\u0026quot;即為: Model、Views、Controller，將網頁的不同階段整合並分類於不同的檔案及資料夾，因此更方便於協作及管理。\n以下為MVC架構的概念:  Model \u0026ndash; 負責與資料庫溝通 View \u0026ndash; 處理有關顯示的部分 Controller \u0026ndash; 邏輯處理(路由、顯示、計算)  實作上的基本流程如下: 照官方說明安裝Flask後，建立虛擬環境並建立MVC對應資料夾，如圖:\n\u0026ldquo;App\u0026quot;指的是應用程式，指的是此次架的Flask網頁，其下有\u0026quot;models\u0026quot;用於存放與功能模塊的py檔，\u0026ldquo;views\u0026quot;存放的為控制如何顯示的py檔，而\u0026quot;templates\u0026quot;存放views所顯示的所有網頁之html檔。\n其中，router.py為此App的Controller，主導邏輯處理。\n我們首先須於router.py中定義路由吉所使用的http協定，並傳至處理顯示的views資料夾中\n# index page @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) # 使用裝飾器定義路由 def index(): return views.index() # view去顯示根目錄(於views/user.py內撰寫 再由views內的function決定如何顯示，這邊我們使用 flask所導入的render_template指令使views.index()顯示index.html。\n# Render the index page class views: def index(): return render_template(\u0026#39;users/index.html\u0026#39;) # 將template 內的index.html 渲染出來 以上便是flask網頁框架的基本概念，而功能模塊的部分(如資料庫連結、網頁跳轉)等。\n即是在models中的py檔進行撰寫，並注意數值及參數地傳出及傳入。\n此篇不詳加介紹，若讀者有興趣，可以參考我的github上關於此次課程的實作。\n總結: flask提供了許多套件簡化了網頁的開發，MVC框架亦讓協作開發的分工與管理更加容易。\n對於要開發簡單功能的靜態網頁而言，實為一個方便的工具，若之後繼續深入摸索，我會再新增文章詳細介紹flask有關的套件。\n","permalink":"https://mike504110403.github.io/blog/mvc-framework-1/","tags":["Web Frame","Flask","Python"],"title":"MVC網頁框架--利用Flask具功能的微型網頁"},{"categories":["Experience sharing"],"contents":"在程式領域中，以Github和個人Blog紀錄所學是十分常見的。對於剛踏入這個領域的我而言，一個能夠快速架站的Hugo非常合我的胃口。\n以下為我認為符合我需求的幾個理由: 方便且快速 Hugo官網有提供他人所製作的主題，可以依個人喜好下載後再做修改，省下相當多時間，同時也降低了製作門檻。\n官方文件清楚 若想製作符合自己需求的網頁版型，可以在官網查詢相對應的功能該如何撰寫，並適時補足html的基礎，對於網頁開發的初學者相對友善。\n免費 這個應該不用多說了XD\n關於架設的步驟，小弟這邊就不獻醜了，大家可以參考以下文章:\n為了 SEO！我離開了 Medium，改在 GitHub 上自架個人網站\n實際上這個網站跟文章也是依照上列文章作者\u0026rsquo;Kucw\u0026rsquo;在Hahow上的課程一步步實作出來的。以下就暫且依照實作步驟分享實作心得:\n一、 環境建置及主題下載 要使用Hugo及Github pages架設網站，首先創建Github帳號，並前往Hugo下載並安裝與個人電腦對應的版本，解壓縮後拖曳出\u0026rsquo;exampleSite\u0026rsquo;資料夾，再將其他資料夾放入\u0026rsquo;exampleSite\u0026rsquo;資料夾，並於內新增一個\u0026rsquo;themes\u0026rsquo;資料夾。\n同時下載自己喜歡的主題 \u0026lsquo;themes\u0026rsquo;資料夾。值得一提的是，不同的主題所支援的功能可能會有差異，不熟悉html的讀者需多加注意，或是可以依照官方文件的提示加入對應的功能。\n二、 個人化設定 針對資料夾內的\u0026rsquo;config.toml\u0026rsquo;編輯，修改對應的編碼，存檔後於\u0026rsquo;cmd\u0026rsquo;內執行hugo server，個人網站即在locall host運行了。不過目前只在個人的電腦上運行，其他人仍無法看到。\n三、 與他人分享個人網站 在完成個人網站能成功顯示後，我們於\u0026rsquo;cmd\u0026rsquo;執行hugo，即可獲取此網站的程式碼資料，該資料會存在\u0026rsquo;public\u0026rsquo;資料夾。\n將該資料夾上傳至Github轉成個人網站。這裡需特別注意，若要使用Github pages轉換網站，repo有限制的格式，須為\u0026rsquo;帳號.github.io\u0026rsquo;。\n總結 Hugo為十分方便的架站工具，大部分的操作經過一兩次就能熟悉，html門檻也相對較低，不過若想透過Hugo建立個人風格強烈的網站，仍需摸索。\n作為踏入這個領域的第一步，在撰寫這篇文章的同時，本人尚未深入學習html，希望能隨著學習的過程慢慢補足。\n","permalink":"https://mike504110403.github.io/blog/hugo-framework/","tags":["Web Frame","GitHub page","Hugo"],"title":"免費個人網站架設--利用 Hugo \u0026 GitHub Page"}]